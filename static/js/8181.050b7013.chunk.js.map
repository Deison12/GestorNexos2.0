{"version":3,"file":"static/js/8181.050b7013.chunk.js","mappings":"mWAWMA,EAAa,CACfC,GAAI,EACJC,UAAMC,EACNC,UAAW,EACXC,kBAAmB,IAuOvB,UApO8B,WAAO,IAAD,QAEhC,GAAwBC,EAAAA,EAAAA,UAAcN,GAAW,eAA1CO,EAAI,KAAEC,EAAO,KAEdC,IADeC,EAAAA,EAAAA,KAAbC,UACcC,EAAAA,EAAAA,OACPC,EAAiBJ,EAAxBK,MACR,GAAyEC,EAAAA,EAAAA,MAAjEC,EAAsB,EAAtBA,uBAAwBC,EAAkB,EAAlBA,mBAAoBC,EAAgB,EAAhBA,iBACpD,GAAoCZ,EAAAA,EAAAA,WAAS,GAAM,eAA5Ca,EAAU,KAAEC,EAAa,KAChC,GAAsCd,EAAAA,EAAAA,WAAS,GAAM,eACrD,GADkB,KAAgB,MACOe,EAAAA,EAAAA,OAAzBC,GAAF,EAANC,OAAgB,EAARD,UAAUE,EAAU,EAAVA,WAEpBC,EAAe,SAACC,GAClB,MAA8BA,EAAEC,OAAxBzB,EAAI,EAAJA,KAAM0B,EAAK,EAALA,MACVC,EAAoB,UADC,EAAJC,KACaC,SAASH,GAASA,EACvC,SAAT1B,IACA2B,EAAWD,EACNI,cACAC,MAAM,KACNC,KAAI,SAACC,GAAY,OAAKA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,EAAE,IAClEC,KAAK,MAEd/B,GAAQ,SAACgC,GAAS,yBACXA,GAAI,cACNtC,EAAO2B,GAAQ,GAExB,EA4BMY,EAAmB,WACrBrB,GAAc,EAClB,EAOMsB,EAAiB,WAAO,IAAD,EACE,OAAf,OAARjC,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUK,aAAK,WAAP,EAAR,EAAiBb,IACjB0C,IAEAC,GAER,EAEMA,EAAU,yCAAG,qHAEJC,QAAQC,IAAIvC,IAAK,OACf,OACAwC,QAGL9B,EAAmB,mCAAiC,eAFpDC,EAAiB,2BAGpB,gDAED2B,QAAQG,MAAM,uBAAuB,EAAD,IACpC9B,EAAiB,2BAA2B,yDAEnD,kBAbe,mCAeVyB,EAAQ,yCAAG,oHAGwB3B,EAAuB,wDAAkD,KAAD,EAAjF,WACDiC,YAAY,CAAD,gBAIf,OAHS1C,EAAhBN,GAAOiD,GAAI,OAAK3C,EAAI,GACtB4C,GAAO,kBACND,GAAI,IACPjD,GAAIM,EAAKN,KAAE,kBAER4C,QAAQC,IAAIK,IAAQ,QAClB,OACAJ,QAGL9B,EAAmB,oCAAkC,0BAFrDC,EAAiB,4BAGpB,0DAGL2B,QAAQG,MAAM,qBAAqB,EAAD,IAClC9B,EAAiB,4BAA4B,0DAEpD,kBAtBa,mCA8Bd,OANAkC,EAAAA,EAAAA,YAAU,WACAvC,GACFL,EAAQK,EAEhB,GAAG,CAACA,KAGA,iCAEI,SAAC,KAAU,CACPwC,MAAO,CAAC,SAAU,SAAkB,OAAR5C,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUK,aAAK,OAAf,EAAiBb,GAAK,cAAgB,gBAClEqD,QAAS,CAAC,SAAU,qBAA8B,OAAR7C,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUK,aAAK,OAAf,EAAiBb,GAAK,eAAwB,OAARQ,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUK,aAAK,WAAP,EAAR,EAAiBb,IAAK,gBAE1G,SAAC,KAAc,CAACsD,MAAe,OAAR9C,QAAQ,IAARA,GAAe,QAAP,EAARA,EAAUK,aAAK,OAAf,EAAiBb,GAAK,cAAgB,kBAE7D,SAAC,IAAI,CAACuD,UAAU,kBAAkBC,SAnErB,SAAC/B,GAClBA,EAAEgC,iBACFhB,GACJ,EAgEiE,UACrD,SAAC,IAAI,CAACc,UAAU,QAAO,UACnB,SAAC,SAAS,CAACA,UAAU,QAAO,UACxB,UAAC,IAAG,CAACG,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGN,UAAU,UAAS,WAClD,SAAC,IAAG,CAACA,UAAU,mCAAkC,UAC7C,SAAC,IAAG,CAACG,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UAChC,UAAC,IAAS,CAACN,UAAU,uBAAsB,WACvC,SAAC,UAAU,CAACA,UAAU,OAAM,0BAC5B,SAAC,IAAY,CACTvD,GAAG,uBACH8D,QAASC,EAAAA,EACTC,KAAK,QACLC,eAAgB,SAACC,GAAM,gBAAQA,EAAOC,QAAO,aAAKD,EAAOE,UAAS,MAClEzC,MAAOoC,EAAAA,EAAAA,MAAyB,SAAAM,GAAO,OAAIA,EAAQD,aAAkB,OAAJ9D,QAAI,IAAJA,OAAI,EAAJA,EAAMF,kBAAiB,KAAK,KAC7FkE,SA/GP,SAAC7C,EAAQG,GAClCA,GACArB,GAAQ,SAACgC,GAAS,yBACXA,GAAI,IACPtC,KAAM2B,EAASuC,QACf/D,kBAAmBwB,EAASwC,WAAS,IAEzC7C,EAAW,UAEXhB,GAAQ,SAACgC,GAAS,yBACXA,GAAI,IACPtC,KAAM,GACNG,kBAAmB,IAAE,IAEpBE,EAAKL,MACNoB,EAAS,OAAQ,CAAC,mCAG9B,EA8FwCkD,QA5FR,WACvBjE,EAAKL,MACNoB,EAAS,OAAQ,CAAC,kCAE1B,EAyFwCmD,OAAQhC,EACRiC,YAAa,SAACC,GAAM,OAChB,SAAC,KAAiB,CACdC,QACkB,KAAdrE,EAAKL,KAAc,CAAC,mCACdK,EAAKL,KAAqB,IAASiB,WAAYA,EAAW,UACpE,SAAC,KAAS,kBACFwD,GAAM,IACVE,MAAM,wBACNC,QAAQ,WACRtB,UAAS,iBACTuB,QAAStC,EACTuC,UAAQ,EACRC,gBAAiB,CACbC,IAAG,sBACOC,EAAAA,EAAAA,QAA6B,CAC/BC,MAAOjE,EAAa,UAAY,MAI5CkE,YAAU,kBACHV,EAAOU,YAAU,IACpBC,QAAS,CACLC,eAAe,0BAAD,OAA4BpE,EAAa,iBAAmB,WAItE,YAQxC,SAAC,IAAG,CAACqC,UAAU,OAAM,UACjB,SAAC,IAAG,CAACgC,GAAI,GAAI7B,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UACxC,UAAC,IAAS,CAACN,UAAU,yBAAwB,WACzC,SAAC,UAAU,CAACA,UAAU,aAAY,qBAClC,iBAAKA,UAAU,8DAA6D,WACxE,UAAC,UAAU,CAACA,UAAU,8BAA6B,WAC/C,SAAC,YAAY,CACT1B,KAAK,QACL0B,UAAU,uBACVtD,KAAK,YACL0B,MAAO,EACP6D,QAA6B,KAAhB,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAMH,WACfmE,SAAU9C,KAEd,iBAAM+B,UAAU,uBAAsB,wBAE1C,UAAC,UAAU,CAACA,UAAU,8BAA6B,WAC/C,SAAC,YAAY,CACT1B,KAAK,QACL0B,UAAU,uBACVtD,KAAK,YACL0B,MAAO,EACP6D,QAA6B,KAAhB,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAMH,WACfmE,SAAU9C,KAEd,iBAAM+B,UAAU,uBAAsB,oCAO1D,SAAC,IAAG,CAACA,UAAU,OAAM,UACjB,SAAC,IAAG,CAACgC,GAAI,GAAI7B,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAG,UACxC,SAAC,IAAM,CACHgB,QAAQ,GACRtB,UAAU,kBACVkC,MAAO,CAAEC,MAAO,QAChB7D,KAAK,SAAQ,SAEZjB,EAAe,kBAAoB,kCAW5E,C","sources":["components/Nexos/pages/Countries/CreateOrEditCountries.tsx"],"sourcesContent":["import { Card, Col, Row, Button, Form, FormGroup } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { useFetch } from '../../hooks/useFetch';\nimport { useAlert, useErrors } from '../../hooks';\nimport { TitleComponent, BreadCrumb, InputErrorMessage } from '../../Global';\nimport countries from '../../../../json/countries.json'\nimport { Autocomplete, TextField } from '@mui/material';\nimport { inputLabelClasses } from \"@mui/material/InputLabel\";\nimport validator from \"validator\";\n\nconst InitValues = {\n    id: 0,\n    name: undefined,\n    status_id: 1,\n    custom_identifier: \"\",\n}\n\nconst CreateOrEditCountries = () => {\n\n    const [form, setForm] = useState<any>(InitValues);\n    const { postData } = useFetch();\n    const location: any = useLocation();\n    const { state: editItemData } = location;\n    const { handleEditConfirmation, handleSuccessAlert, handleErrorAlert } = useAlert();\n    const [inputFocus, setInputFocus] = useState(false);\n    const [nameTouched, setNameTouched] = useState(false);\n    const { errors, setError, clearError } = useErrors();\n\n    const handleChange = (e: any) => {\n        const { name, value, type } = e.target;\n        let newValue = type === \"radio\" ? parseInt(value) : value;\n        if (name === 'name') {\n            newValue = value\n                .toLowerCase()\n                .split(' ')\n                .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ');\n        }\n        setForm((prev: any) => ({\n            ...prev,\n            [name]: newValue\n        }));\n    };\n\n    const handleAutocompleteChange = (e: any, newValue: any) => {\n        if (newValue) {\n            setForm((prev: any) => ({\n                ...prev,\n                name: newValue.name_es,\n                custom_identifier: newValue.dial_code\n            }));\n            clearError('name');\n        } else {\n            setForm((prev: any) => ({\n                ...prev,\n                name: \"\",\n                custom_identifier: \"\"\n            }));\n            if (!form.name) {\n                setError(\"name\", [\"El campo nombre es obligatorio\"]);\n            }\n        }\n    };\n\n    const handleAutocompleteClear = () => {\n        if (!form.name) {\n            setError(\"name\", [\"El campo nombre es obligatorio\"]);\n        }\n    };\n\n    const handleInputFocus = () => {\n        setInputFocus(true);\n    };\n\n    const handlesubmit = (e: any) => {\n        e.preventDefault();\n        selectFunction();\n    };\n\n    const selectFunction = () => {\n        if (location?.state?.id != null) {\n            editForm();\n        } else {\n            createForm();\n        }\n    };\n\n    const createForm = async () => {\n        try {\n            return console.log(form)\n            const res = await postData(form, 'quoteTypes/store');\n            if (!res.success) {\n                handleErrorAlert(\"Error al crear el form.\");\n            } else {\n                handleSuccessAlert(\"El form se creó exitosamente.\", \"listarForms\");\n            }\n        } catch (error) {\n            console.error(\"Error en createForm:\", error);\n            handleErrorAlert(\"Error al crear el form.\");\n        }\n    };\n\n    const editForm = async () => {\n        try {\n            // Mostrar la confirmación antes de editar el form\n            const confirmationResult = await handleEditConfirmation(\"¿Estás seguro que deseas editar este servicio?\");\n            if (confirmationResult.isConfirmed) {\n                const { id, ...rest } = form;\n                const payload = {\n                    ...rest,\n                    id: form.id,\n                };\n                return console.log(payload)\n                const res = await postData(payload, 'quoteTypes/store');\n                if (!res.success) {\n                    handleErrorAlert(\"Error al editar el pais.\");\n                } else {\n                    handleSuccessAlert(\"El form se editó exitosamente.\", \"listarservicioscotizar\");\n                }\n            }\n        } catch (error) {\n            console.error(\"Error en editForm:\", error);\n            handleErrorAlert(\"Error al editar el form.\");\n        }\n    };\n\n    useEffect(() => {\n        if (!!editItemData) {\n            setForm(editItemData);\n        }\n    }, [editItemData]);\n\n    return (\n        <>\n            {/* <!-- breadcrumb --> */}\n            <BreadCrumb\n                items={['INICIO', 'PAISES', location?.state?.id ? \"Editar pais\" : \"Agregar pais\"]}\n                baseURL={['inicio', 'nexos/listarpaises', location?.state?.id ? \"editarpais/\" + location?.state?.id : \"crearpais\"]} />\n            {/* title component */}\n            <TitleComponent title={location?.state?.id ? \"Editar pais\" : \"Agregar pais\"} />\n            {/* Card */}\n            <Form className=\"form-horizontal\" onSubmit={handlesubmit}>\n                <Card className=\"w-100\">\n                    <Card.Body className=\"w-100\">\n                        <Col sm={12} md={12} lg={6} xl={6} className='mx-auto'>\n                            <Row className=\"justify-content-center mt-5 mb-3\">\n                                <Col sm={12} md={12} lg={12} xl={12}>\n                                    <FormGroup className=\"form-group w-100 m-0\">\n                                        <Form.Label className='mb-3'>NOMBRE PAIS</Form.Label>\n                                        <Autocomplete\n                                            id=\"country-autocomplete\"\n                                            options={countries.countries}\n                                            size=\"small\"\n                                            getOptionLabel={(option) => `${option.name_es} (${option.dial_code})`}\n                                            value={countries.countries.find(country => country.dial_code === form?.custom_identifier) || null}\n                                            onChange={handleAutocompleteChange}\n                                            onClose={handleAutocompleteClear}\n                                            onBlur={handleInputFocus}\n                                            renderInput={(params) => (\n                                                <InputErrorMessage\n                                                    message={\n                                                        form.name === \"\" ? [\"El campo nombre es obligatorio\"]\n                                                            : form.name === undefined ? [] : []} inputFocus={inputFocus} >\n                                                    <TextField\n                                                        {...params}\n                                                        label=\"Seleccione un país\"\n                                                        variant=\"outlined\"\n                                                        className={`orange-outline`}\n                                                        onFocus={handleInputFocus}\n                                                        required\n                                                        InputLabelProps={{\n                                                            sx: {\n                                                                [`&.${inputLabelClasses.shrink}`]: {\n                                                                    color: inputFocus ? \"#ff7c23\" : ''\n                                                                }\n                                                            }\n                                                        }}\n                                                        InputProps={{\n                                                            ...params.InputProps,\n                                                            classes: {\n                                                                notchedOutline: `custom-notched-outline ${inputFocus ? 'orange-outline' : ''}`,\n                                                            },\n                                                        }}\n                                                    />\n                                                </InputErrorMessage>\n\n                                            )}\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-2'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12} >\n                                    <FormGroup className=\"form-group text-center\">\n                                        <Form.Label className=\"form-label\">Estado</Form.Label>\n                                        <div className=\"custom-controls-stacked d-flex justify-content-center gap-5\">\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={1}\n                                                    checked={form?.status_id === 1}\n                                                    onChange={handleChange}\n                                                />\n                                                <span className=\"custom-control-label\">Activo</span>\n                                            </Form.Label>\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={0}\n                                                    checked={form?.status_id === 0}\n                                                    onChange={handleChange}\n                                                />\n                                                <span className=\"custom-control-label\">Inactivo</span>\n                                            </Form.Label>\n                                        </div>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-4'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    <Button\n                                        variant=\"\"\n                                        className=\"btn btn-primary\"\n                                        style={{ width: \"100%\" }}\n                                        type=\"submit\"\n                                    >\n                                        {editItemData ? \"Guardar cambios\" : \"Editar cambios\"}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </Form>\n        </>\n    );\n\n}\n\nexport default CreateOrEditCountries;\n"],"names":["InitValues","id","name","undefined","status_id","custom_identifier","useState","form","setForm","location","useFetch","postData","useLocation","editItemData","state","useAlert","handleEditConfirmation","handleSuccessAlert","handleErrorAlert","inputFocus","setInputFocus","useErrors","setError","errors","clearError","handleChange","e","target","value","newValue","type","parseInt","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","prev","handleInputFocus","selectFunction","editForm","createForm","console","log","success","error","isConfirmed","rest","payload","useEffect","items","baseURL","title","className","onSubmit","preventDefault","sm","md","lg","xl","options","countries","size","getOptionLabel","option","name_es","dial_code","country","onChange","onClose","onBlur","renderInput","params","message","label","variant","onFocus","required","InputLabelProps","sx","inputLabelClasses","color","InputProps","classes","notchedOutline","xs","checked","style","width"],"sourceRoot":""}