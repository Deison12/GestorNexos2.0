{"version":3,"file":"static/js/9646.cb61e24a.chunk.js","mappings":"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","sources":["components/Nexos/pages/Cities/CreateOrEditCities.tsx"],"sourcesContent":["import { Card, Col, Row, Button, Form, FormGroup } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { useFetch } from '../../hooks/useFetch';\nimport { useAlert, useErrors } from '../../hooks';\nimport { TitleComponent, BreadCrumb, InputErrorMessage } from '../../Global';\nimport { Autocomplete, TextField } from '@mui/material';\nimport { inputLabelClasses } from \"@mui/material/InputLabel\";\nimport countries from '../../../../json/countries.json'\n\nconst InitValues = {\n    id: 0,\n    name: undefined,\n    status_id: 1,\n}\n\nconst CreateOrEditCities = () => {\n\n    const [form, setForm] = useState<any>(InitValues);\n    const { postData } = useFetch();\n    const location: any = useLocation();\n    const { state: editItemData } = location;\n    const { handleEditConfirmation, handleSuccessAlert, handleErrorAlert } = useAlert();\n    const [inputFocus, setInputFocus] = useState(false);\n    //const [nameTouched, setNameTouched] = useState(false);\n    const { errors, setError, clearError } = useErrors();\n\n    const handleChange = (e: any) => {\n        const { name, value, type } = e.target;\n        let newValue = type === \"radio\" ? parseInt(value) : value;\n        if (name === 'name') {\n            newValue = value\n                .toLowerCase()\n                .split(' ')\n                .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1))\n                .join(' ');\n        }\n        setForm((prev: any) => ({\n            ...prev,\n            [name]: newValue\n        }));\n    };\n\n    const handleAutocompleteChange = (event: any, newValue: any) => {\n        if (newValue) {\n            setForm((prev: any) => ({\n                ...prev,\n                name: newValue.name_es,\n            }));\n        }\n    };\n    const handleAutocompleteClear = () => {\n        if (!form.name) {\n            setError(\"name\", [\"El campo nombre es obligatorio\"]);\n        } else {\n            clearError(\"name\")\n        }\n    };\n\n    const handleInputFocus = () => {\n        setInputFocus(true);\n    };\n\n    const handlesubmit = (e: any) => {\n        e.preventDefault();\n        selectFunction();\n    };\n\n    const selectFunction = () => {\n        if (location?.state?.id != null) {\n            editForm();\n        } else {\n            createForm();\n        }\n    };\n\n    const createForm = async () => {\n        try {\n            const res = await postData(form, 'quoteTypes/store');\n            if (!res.success) {\n                handleErrorAlert(\"Error al crear el form.\");\n            } else {\n                handleSuccessAlert(\"El form se creó exitosamente.\", \"listarForms\");\n            }\n        } catch (error) {\n            console.error(\"Error en createForm:\", error);\n            handleErrorAlert(\"Error al crear el form.\");\n        }\n    };\n\n    const editForm = async () => {\n        try {\n            // Mostrar la confirmación antes de editar el form\n            const confirmationResult = await handleEditConfirmation(\"¿Estás seguro que deseas editar este servicio?\");\n            if (confirmationResult.isConfirmed) {\n                const { id, ...rest } = form;\n                const payload = {\n                    ...rest,\n                    id: form.id,\n                };\n                return console.log(payload)\n                /* const res = await postData(payload, 'quoteTypes/store');\n                if (!res.success) {\n                    handleErrorAlert(\"Error al editar el pais.\");\n                } else {\n                    handleSuccessAlert(\"El form se editó exitosamente.\", \"listarservicioscotizar\");\n                } */\n            }\n        } catch (error) {\n            console.error(\"Error en editForm:\", error);\n            handleErrorAlert(\"Error al editar el form.\");\n        }\n    };\n\n    useEffect(() => {\n        if (!!editItemData) {\n            setForm(editItemData);\n        }\n    }, [editItemData]);\n    console.log(errors)\n    return (\n        <>\n            {/* <!-- breadcrumb --> */}\n            <BreadCrumb\n                items={['INICIO', 'PAISES', location?.state?.id ? \"Editar ciudad\" : \"Agregar ciudad\"]}\n                baseURL={['inicio', 'nexos/listarciudades', location?.state?.id ? \"editarciudad/\" + location?.state?.id : \"crearciudad\"]} />\n            {/* title component */}\n            <TitleComponent title={location?.state?.id ? \"Editar ciudad\" : \"Agregar ciudad\"} />\n            {/* Card */}\n            <Form className=\"form-horizontal\" onSubmit={handlesubmit}>\n                <Card className=\"w-100\">\n                    <Card.Body className=\"w-100\">\n                        <Col sm={12} md={12} lg={6} xl={6} className='mx-auto'>\n                            <Row className=\"justify-content-center mt-5 mb-3\">\n                                <Col sm={12} md={12} lg={12} xl={12}>\n                                    <FormGroup className=\"form-group w-100 m-0\">\n                                        <Form.Label className='mb-3'>NOMBRE CIUDAD</Form.Label>\n                                        <Autocomplete\n                                            id=\"country-autocomplete\"\n                                            options={countries.countries}\n                                            size=\"small\"\n                                            getOptionLabel={(option) => option.name_es}\n                                            value={countries.countries.find(country => country.name_es === form.name) || null}\n                                            onChange={handleAutocompleteChange}\n                                            onClose={handleAutocompleteClear}\n                                            onBlur={handleInputFocus}\n                                            renderInput={(params) => (\n                                                <InputErrorMessage\n                                                    message={form.name === \"\" ? [\"El campo nombre es obligatorio\"] : []}\n                                                    inputFocus={inputFocus}\n                                                >\n                                                    <TextField\n                                                        {...params}\n                                                        label=\"Seleccione una ciudad\"\n                                                        variant=\"outlined\"\n                                                        className={`orange-outline`}\n                                                        onFocus={handleInputFocus}\n                                                        required\n                                                        InputLabelProps={{\n                                                            sx: {\n                                                                [`&.${inputLabelClasses.shrink}`]: {\n                                                                    color: inputFocus ? \"#ff7c23\" : '',\n                                                                },\n                                                            },\n                                                        }}\n                                                        InputProps={{\n                                                            ...params.InputProps,\n                                                            classes: {\n                                                                notchedOutline: `custom-notched-outline ${inputFocus ? 'orange-outline' : ''}`,\n                                                            },\n                                                        }}\n                                                    />\n                                                </InputErrorMessage>\n                                            )}\n                                        />\n\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-2'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12} >\n                                    <FormGroup className=\"form-group text-center\">\n                                        <Form.Label className=\"form-label\">Estado</Form.Label>\n                                        <div className=\"custom-controls-stacked d-flex justify-content-center gap-5\">\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={1}\n                                                    checked={form?.status_id === 1}\n                                                    onChange={handleChange}\n                                                />\n                                                <span className=\"custom-control-label\">Activo</span>\n                                            </Form.Label>\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={0}\n                                                    checked={form?.status_id === 0}\n                                                    onChange={handleChange}\n                                                />\n                                                <span className=\"custom-control-label\">Inactivo</span>\n                                            </Form.Label>\n                                        </div>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-4'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    <Button\n                                        variant=\"\"\n                                        className=\"btn btn-primary\"\n                                        style={{ width: \"100%\" }}\n                                        type=\"submit\"\n                                    >\n                                        {editItemData ? \"Guardar cambios\" : \"Editar cambios\"}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </Form>\n        </>\n    );\n\n}\n\nexport default CreateOrEditCities;\n"],"names":["InitValues","id","name","undefined","status_id","useState","form","setForm","postData","useFetch","location","useLocation","editItemData","state","useAlert","handleEditConfirmation","handleSuccessAlert","handleErrorAlert","inputFocus","setInputFocus","useErrors","errors","setError","clearError","handleChange","e","target","value","newValue","type","parseInt","toLowerCase","split","map","word","charAt","toUpperCase","slice","join","prev","handleInputFocus","selectFunction","editForm","createForm","success","console","error","isConfirmed","rest","payload","log","useEffect","items","baseURL","title","className","onSubmit","preventDefault","sm","md","lg","xl","options","countries","size","getOptionLabel","option","name_es","country","onChange","event","onClose","onBlur","renderInput","params","message","label","variant","onFocus","required","InputLabelProps","sx","inputLabelClasses","color","InputProps","classes","notchedOutline","xs","checked","style","width"],"sourceRoot":""}