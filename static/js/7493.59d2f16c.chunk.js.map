{"version":3,"file":"static/js/7493.59d2f16c.chunk.js","mappings":"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","sources":["components/Nexos/pages/schecdulle/ListTypesScheduling/CreateOrEditScheduling.tsx"],"sourcesContent":["import { Card, Col, Row, Button, Form, FormGroup } from 'react-bootstrap';\nimport { useEffect, useState } from 'react';\nimport { useLocation } from \"react-router-dom\";\nimport { useFetch } from '../../../hooks/useFetch';\nimport { useAlert, useErrors } from '../../../hooks';\nimport { TitleComponent, BreadCrumb, InputErrorMessage } from '../../../Global';\nimport validator from \"validator\";\nimport { CFormInput } from '@coreui/react';\n\nconst InitValues = {\n    id: 0,\n    name: \"\",\n    status_id: 1,\n}\n\nconst CreateOrEditScheduling = () => {\n    const [form, setForm] = useState<any>(InitValues);\n    const { postData, putData } = useFetch();\n    const location: any = useLocation();\n    const { state: editItemData } = location;\n    const { handleEditConfirmation, handleErrorAlert } = useAlert();\n    const [inputFocus, setInputFocus] = useState(false);\n    const [hasErrors, setHasErrors] = useState(true);\n    const { errors, setError } = useErrors();\n\n    const handleChange = (e: any) => {\n        let { name, value, type } = e.target;\n\n        let newValue = type === \"radio\" ? parseInt(value) : value;\n\n        if (name === \"name\" && inputFocus) {\n            value = value.trim();\n            if (value === \"\" || validator.isEmpty(value)) {\n                setError(\"name\", [\"El campo nombre es obligatorio\"]);\n                setHasErrors(true);\n            } else {\n                setError(\"name\", [\"\"]);\n                setHasErrors(false);\n            }\n            setForm((prev: any) => ({\n                ...prev,\n                [name]: newValue\n            }));\n        }\n\n        if (name === \"status_id\") {\n            setForm((prev: any) => ({\n                ...prev,\n                [name]: newValue\n            }));\n        }\n    };\n\n    const handleInputFocus = () => {\n        setInputFocus(true);\n    };\n\n    const handlesubmit = (e: any) => {\n        e.preventDefault();\n        selectFunction();\n    };\n\n    const selectFunction = () => {\n        if (location?.state?.id != null) {\n            editForm();\n        } else {\n            createForm();\n        }\n    };\n\n    const createForm = async () => {\n        try {\n            await postData(form, 'residential/scheduling/type/create', false, \"listatiposagendamiento\");\n        } catch (error) {\n            console.error(\"Error en createForm:\", error);\n            handleErrorAlert(\"Error al crear el form.\");\n        }\n    };\n\n    const editForm = async () => {\n        try {\n            const confirmationResult = await handleEditConfirmation(\"¿Estás seguro que deseas editar este servicio?\");\n            if (confirmationResult.isConfirmed) {\n                const { id, ...rest } = form;\n                const payload = {\n                    ...rest,\n                    id: location?.state?.id,\n                };\n                await putData(payload, 'residential/scheduling/type/edit', \"listatiposagendamiento\");\n            }\n        } catch (error) {\n            console.error(\"Error en editForm:\", error);\n            handleErrorAlert(\"Error al editar el form.\");\n        }\n    };\n\n    useEffect(() => {\n        if (!!editItemData) {\n            setForm(editItemData);\n            setHasErrors(false);\n        }\n    }, [editItemData]);\n\n\n    return (\n        <>\n            {/* <!-- breadcrumb --> */}\n            <BreadCrumb\n                items={['INICIO', 'TIPO DE AGENDAMIENTO', location?.state?.id ? \"Editar tipo de agendamiento\" : \"Agregar tipo de agendamiento\"]}\n                baseURL={['inicio', 'nexos/tipoagendamiento', location?.state?.id ? \"tipoagendamiento/\" + location?.state?.id : \"tipoagendamiento\"]} />\n            {/* title component */}\n            <TitleComponent title={location?.state?.id ? \"Editar tipo de agendamiento\" : \"Agregar tipo de agendamiento\"} />\n            {/* Card */}\n            <Form className=\"form-horizontal\" onSubmit={handlesubmit}>\n                <Card className=\"w-100\">\n                    <Card.Body className=\"w-100\">\n                        <Col sm={12} md={12} lg={6} xl={6} className='mx-auto'>\n                            <Row className=\"justify-content-center mt-5 mb-3\">\n                                <Col sm={12} md={12} lg={12} xl={12}>\n                                    <FormGroup className=\"form-group w-100  text-center m-0\">\n                                        <Form.Label className='mb-3'>NOMBRE DEL TIPO DE AGENDAMIENTO</Form.Label>\n                                        <InputErrorMessage message={errors?.name?.[0]}\n                                            inputFocus={inputFocus}>\n                                            <CFormInput\n                                                className='text-center'\n                                                type=\"text\"\n                                                id=\"quote-autocomplete\"\n                                                name=\"name\"\n                                                onChange={handleChange}\n                                                onBlur={handleChange}\n                                                onFocus={handleInputFocus}\n                                                value={form.name ? form.name : \"\"}\n                                                required\n                                            />\n                                        </InputErrorMessage>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-2'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12} >\n                                    <FormGroup className=\"form-group text-center\">\n                                        <Form.Label className=\"form-label\">Estado</Form.Label>\n                                        <div className=\"custom-controls-stacked d-flex justify-content-center gap-5\">\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={1}\n                                                    checked={form?.status_id === 1}\n                                                    onChange={handleChange}\n                                                    onClick={handleInputFocus}\n                                                />\n                                                <span className=\"custom-control-label\">Activo</span>\n                                            </Form.Label>\n                                            <Form.Label className=\"custom-control custom-radio\">\n                                                <Form.Control\n                                                    type=\"radio\"\n                                                    className=\"custom-control-input\"\n                                                    name=\"status_id\"\n                                                    value={0}\n                                                    checked={form?.status_id === 0}\n                                                    onChange={handleChange}\n                                                    onClick={handleInputFocus}\n                                                />\n                                                <span className=\"custom-control-label\">Inactivo</span>\n                                            </Form.Label>\n                                        </div>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n\n                            <Row className='mb-4'>\n                                <Col xs={12} sm={12} md={12} lg={12} xl={12}>\n                                    <Button\n                                        variant=\"\"\n                                        className=\"btn btn-primary\"\n                                        style={{ width: \"100%\" }}\n                                        type=\"submit\"\n                                        disabled={hasErrors}\n                                    >\n                                        {editItemData ? \"Guardar cambios\" : \"Editar cambios\"}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Card.Body>\n                </Card>\n            </Form>\n        </>\n    )\n}\n\nexport default CreateOrEditScheduling;"],"names":["InitValues","id","name","status_id","useState","form","setForm","useFetch","postData","putData","location","useLocation","editItemData","state","useAlert","handleEditConfirmation","handleErrorAlert","inputFocus","setInputFocus","hasErrors","setHasErrors","useErrors","errors","setError","handleChange","e","target","value","newValue","type","parseInt","trim","validator","prev","handleInputFocus","selectFunction","editForm","createForm","console","error","isConfirmed","rest","payload","useEffect","items","baseURL","title","className","onSubmit","preventDefault","sm","md","lg","xl","message","onChange","onBlur","onFocus","required","xs","checked","onClick","variant","style","width","disabled"],"sourceRoot":""}