{"version":3,"file":"static/js/4070.0bb6b26b.chunk.js","mappings":"0WAqFA,EAjF0B,SAAH,GAQX,IAPVA,EAAI,EAAJA,KACAC,EAAS,EAATA,UACAC,EAAO,EAAPA,QACAC,EAAQ,EAARA,SACAC,EAAY,EAAZA,aACAC,EAAO,EAAPA,QACAC,EAAU,EAAVA,WAEA,GAA4BC,EAAAA,EAAAA,UAAS,IAAG,eAAzBC,GAAF,KAAW,MAElBC,EAAgB,yCAAG,mFACvBP,IACAI,EAAW,IAAG,2CACf,kBAHqB,mCAIhBI,EAAoC,KAAnBL,EAAQM,OAEzBC,EAAmB,SAACC,GAEtBL,EADa,cAAXK,EACQ,YAEA,cAERH,GAEFP,EAAS,CAAEE,QAAAA,EAASQ,OAAAA,GAExB,EAEA,OACE,UAACC,EAAA,EAAK,CACJC,KAAK,KACL,kBAAgB,gCAChBC,KAAMf,EACNgB,OAAQR,EACRS,UAAU,EAAM,WAEhB,UAACJ,EAAA,OAAU,YACT,UAACK,EAAA,QAAU,YACT,SAACC,EAAA,EAAc,CAACC,MAAM,qBAAsBC,MAAM,YAElD,gBAAIC,UAAU,cAAa,iCAAoB,eAAGA,UAAU,8BAA6B,gBAAKvB,EAAKwB,gBAAiB,QACpH,gBAAID,UAAU,cAAa,2CAAwB,eAAGA,UAAU,8BAA6B,eAAInB,EAAY,OAAM,QACnH,sBAGF,UAACe,EAAA,QAAU,CAACI,UAAU,OAAOE,UAAU,+BAA8B,WACnE,SAACN,EAAA,QAAU,uBACX,SAACA,EAAA,UAAY,CACXO,GAAG,WACHC,KAAM,EACNC,KAAK,UACLC,MAAOxB,EACPyB,SAAU,SAACC,GAAC,OAAKzB,EAAWyB,EAAEC,OAAOH,MAAM,WAIjD,UAACf,EAAA,SAAY,YACX,SAACmB,EAAA,EAAM,CACLC,QAAQ,OACRC,QAAS1B,EAAiB,qBAG5B,SAACwB,EAAA,EAAM,CACLC,QAAQ,SACRE,SAAU1B,EACVyB,QAAS,kBAAMvB,EAAiB,YAAY,EAAC,wBAG/C,SAACqB,EAAA,EAAM,CACLG,SAAU1B,EACVwB,QAAQ,UACRC,QAAS,kBAAMvB,EAAiB,aAAa,EAAC,6BAOxD,E,8DC6pBA,EAhuBsB,WAAO,IAAD,oBAGlByB,GAFgBC,EAAAA,EAAAA,MACdC,MACeC,GAEvB,GAAiCC,EAAAA,EAAAA,MAAzBC,EAAU,EAAVA,WAAYC,EAAQ,EAARA,SACpB,GAAwBpC,EAAAA,EAAAA,UAAc,CAAC,GAAE,eAAlCqC,EAAI,KAAEC,EAAO,KACpB,GAA8BtC,EAAAA,EAAAA,WAAS,GAAM,eAAtCuC,EAAO,KAAEC,EAAU,KAC1B,GAAkCxC,EAAAA,EAAAA,WAAS,GAAM,eAA1CN,EAAS,KAAE+C,EAAY,KAC9B,GAA8BzC,EAAAA,EAAAA,UAAiB,8EAA6E,eAArH0C,EAAO,KACd,GAD0B,MACI1C,EAAAA,EAAAA,UAAS,KAAG,eAAnCF,GAAO,KAAEC,GAAU,KAC1B,IAAoCC,EAAAA,EAAAA,UAAoC,CAAC,GAAE,iBAApE2C,GAAU,MAAEC,GAAa,MAChC,IAAyCC,EAAAA,EAAAA,MAAjCC,GAAM,GAANA,OAAQC,GAAQ,GAARA,SAAUC,GAAU,GAAVA,WAC1B,IAAsChD,EAAAA,EAAAA,UAAkC,CAAC,GAAE,iBAApEiD,GAAW,MAAEC,GAAc,MAE5BC,GAAyB,SAACC,GAC5BF,IAAe,kBAAKD,IAAW,cAAGG,GAAaH,GAAYG,KAC/D,EA6IMC,GAAe,SAAChC,EAAWC,GAC7BgB,GAAQ,SAACgB,GACL,IAAMC,GAAW,UAAQD,GAczB,MAboB,kBAATjC,EACPkC,EAAYC,MAAQD,EAAYC,MAAMC,KAAI,SAACC,GACvC,OAAIA,EAAKzB,KAAOZ,GACL,kBACAqC,GAAI,IACPpC,MAAOA,IAGRoC,CACX,IAEAH,EAAYlC,GAAQC,EAEjBiC,CACX,IACAP,GAAW3B,GAlJQ,SAACsC,EAAkBC,GACtC,IAAMC,GAAqB,UAAQf,IAClB,SAAba,IACIG,IAAAA,QAAkBF,GAClBC,EAAiBxC,KAAO,CAAC,yCAElBwC,EAAiBxC,MAGf,QAAbsC,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBE,IAAM,sCAEhBF,EAAiBE,KAGf,iBAAbJ,IACIG,IAAAA,QAAkBF,GAElBC,EAAiB5C,aAAe,mDAEzB4C,EAAiB5C,cAGf,gBAAb0C,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBG,YAAc,qDAExBH,EAAiBG,aAGf,YAAbL,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBI,QAAU,4DAEpBJ,EAAiBI,SAGf,mBAAbN,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBK,eAAiB,uDAE3BL,EAAiBK,gBAGf,qBAAbP,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBM,iBAAmB,mDAE7BN,EAAiBM,kBAGf,iBAAbR,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBO,aAAe,iDAEzBP,EAAiBO,cAGf,iBAAbT,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBQ,aAAe,mDAEzBR,EAAiBQ,cAGf,UAAbV,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBS,MAAQ,8CAElBT,EAAiBS,OAGf,SAAbX,IACIG,IAAAA,QAAkBF,GAElBC,EAAiBU,KAAO,yCAEjBV,EAAiBU,MAGf,iBAAbZ,IAEIG,IAAAA,QAAkBF,GAElBC,EAAiBW,aAAe,gDAEzBX,EAAiBW,cAIhC,IAAMC,GAAS,UAAQ9B,IACvBN,EAAKmB,MAAMkB,SAAQ,SAAChB,GACZA,EAAKzB,KAAO0B,IACM,KAAdC,GAAkC,MAAdA,GAAmC,OAAdA,QAAoCe,IAAdf,GAAyC,MAAdA,EAC1Fa,EAAU,QAAD,OAASf,EAAKzB,KAAK,wBAAoByB,EAAKrC,KAAI,oBAClDuD,WAAWhB,GAAa,EAC/Ba,EAAU,QAAD,OAASf,EAAKzB,KAAK,wBAAoByB,EAAKrC,KAAI,+CAElDoD,EAAU,QAAD,OAASf,EAAKzB,KAG1C,IAEAW,GAAc6B,GAEd1B,GAAS,MAAOc,EAAiBE,KACjChB,GAAS,eAAgBc,EAAiB5C,cAC1C8B,GAAS,cAAec,EAAiBG,aACzCjB,GAAS,UAAWc,EAAiBI,SACrClB,GAAS,iBAAkBc,EAAiBK,gBAC5CnB,GAAS,mBAAoBc,EAAiBM,kBAC9CpB,GAAS,eAAgBc,EAAiBO,cAC1CrB,GAAS,eAAgBc,EAAiBQ,cAC1CtB,GAAS,QAASc,EAAiBS,OACnCvB,GAAS,OAAQc,EAAiBU,MAClCxB,GAAS,eAAgBc,EAAiBW,aAC9C,CAsBIK,CAAexD,EAAMC,EACzB,EAEMwD,GAAY,yCAAG,WAAOC,GAAc,kFAsBrC,OArBKvB,EAAQnB,EAAKmB,OAASnB,EAAKmB,MAAMC,KAAI,SAACC,GAAS,MAAM,CAAEzB,GAAIyB,EAAKzB,GAAIX,MAAOoC,EAAKpC,MAAO,IACvF0D,EAAsB3C,EAAK8B,iBAC3Bc,EAAkB5C,EAAK+B,aAEvBc,EAAU,CACZ1B,MAAAA,EACA1B,SAAUA,EACVqC,iBAAkBa,EAClBZ,aAAca,EACdZ,aAAcc,IAAM9C,EAAKgC,cAAce,OAAO,cAC9CnE,aAAcoB,EAAKpB,aACnBgD,QAAS5B,EAAK4B,QACdM,KAAMlC,EAAKkC,KACXlD,KAAMgB,EAAK2B,YACXE,eAAgB7B,EAAK6B,eACrBmB,cAAehD,EAAKgD,cACpBtB,IAAK1B,EAAK0B,IACVS,aAAcnC,EAAKmC,aACnBF,MAAOjC,EAAKiC,MACZhE,OAAQyE,EAAUzE,OAClBgF,YAAaP,EAAUjF,SACzB,EAAD,OAEKsC,EAAS8C,EAAS,iCAAiC,KAAD,EACxDzC,GAAa,GACb1C,GAAW,IAAG,2CACjB,gBA3BiB,sCAiElB,OApCAwF,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,yCAAG,kHAE0BrD,EAAW,gCAAD,OAAiCL,IAAY,KAAD,EAAlF2D,EAAmB,OACzBnD,EAAQ,CACJL,GAAI,EACJ3B,OAAQ,GACRoF,eAAoD,SAApCD,EAAetB,iBAA8B,GAAKsB,EAAetB,kBAAoB9B,EAAK8B,iBAC1GwB,aAA8C,SAAhCF,EAAerB,aAA0B,GAAKqB,EAAerB,cAAgB/B,EAAK+B,aAChGC,aAA8C,SAAhCoB,EAAepB,aAA0B,KAAOoB,EAAepB,cAAgB,GAC7FJ,QAASwB,EAAexB,SAAW,GACnCM,KAAMkB,EAAelB,MAAQ,GAC7BP,YAAayB,EAAezB,aAAe,GAC3CE,eAAgBuB,EAAevB,gBAAkB,GACjDmB,cAAeI,EAAeJ,eAAiB,GAC/C7B,MAAOiC,EAAejC,MAChBiC,EAAejC,MAAMC,KAAI,SAACC,GAAS,MAAM,CACvCzB,GAAIyB,EAAKzB,GACTZ,KAAMqC,EAAKrC,KACXC,MAAOoC,EAAKkC,UAAY,GAC3B,IACC,GACNzB,iBAAsD,SAApCsB,EAAetB,iBAA8B,GAAKsB,EAAetB,kBAAoB,GACvGC,aAA8C,SAAhCqB,EAAerB,aAA0B,GAAKqB,EAAerB,cAAgB,GAC3FnD,aAAcwE,EAAexE,cAAgB,GAC7C8C,IAAK0B,EAAe1B,KAAO,GAC3BS,aAAciB,EAAejB,cAAgB,GAC7CF,MAAOmB,EAAenB,OAAS,KAChC,gDAEHuB,QAAQC,IAAI,QAAQ,EAAD,IAAS,yDAEnC,kBA/BY,mCAgCbN,GACJ,GAAG,KAGC,iCAEI,SAAE,KAAU,CACRhC,MAAO,CAAC,SAAU,YAClBuC,QAAS,CAAC,IAAK,2BAGnB,SAAC,EAAiB,CACdtG,KAAM4C,EACNxC,aAAciC,EACdpC,UAAWA,EACXC,QAAS,kBAAM8C,GAAa,EAAM,EAClC7C,SAAUkF,GACVhF,QAASA,GACTC,WAAYA,MAIhB,iBAAKiB,UAAU,QAAO,WAClB,UAACgF,EAAA,EAAG,YAEA,UAACC,EAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,WACtC,eAAItF,UAAU,6BAA4B,+CAC1C,gBAAKuF,MAAO,CACRC,SAAU,SACVC,IAAK,GACLC,OAAQ,sBACRC,SAAU,QACZ,UACE,SAAC,KAAS,CAACC,OAAQlE,UAK3B,UAACuD,EAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAE,WACtC,eAAItF,UAAU,6BAA4B,8BAC1C,SAAC6F,EAAA,EAAI,CAAC7F,UAAU,MACZuF,MAAO,CACHO,OAAQ,qBACV,UAEF,UAAClG,EAAA,EAAI,CAACI,UAAU,kBAAiB,WAC7B,UAACgF,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAACJ,EAAA,QAAU,CAACI,UAAU,aAAY,oBAEtC,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,kBACIa,UAAU,EACVkF,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,MACLC,MAAgB,QAAX,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM0B,WAAG,QAAI,GACpBxC,SAAU,SAACC,GAAC,OAAK6B,GAAa,MAAO7B,EAAEC,OAAOH,MAAM,UAIhE,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,eACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA0B,aACnCrB,QAAS,kBAAMuB,GAAuB,eAAe,EACrDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAMpB,iBAE1B,iBAAMD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,kCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAO7B,aAAcmG,WAAY7E,EAAQ,UACjE,kBACIV,SAAUoB,GAA0B,aACpC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,eACLC,MAAyB,QAApB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMpB,oBAAY,QAAI,GAC7BM,SAAU,SAACC,GAAC,OAAK6B,GAAa,eAAgB7B,EAAEC,OAAOH,MAAM,YAK7E,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAAyB,YAClCrB,QAAS,kBAAMuB,GAAuB,cAAc,KAExD,iBAAMnC,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,gCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOkB,YAAaoD,WAAY7E,EAAQ,UAChE,kBACIV,SAAUoB,GAAyB,YACnC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,cACLC,MAAwB,QAAnB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM2B,mBAAW,QAAI,GAC5BzC,SAAU,SAACC,GAAC,OAAK6B,GAAa,cAAe7B,EAAEC,OAAOH,MAAM,YAK5E,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAAqB,QAC9BrB,QAAS,kBAAMuB,GAAuB,UAAU,EAChDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAM4B,YAE1B,iBAAMjD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,oCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOmB,QAASmD,WAAY7E,EAAQ,UAC5D,kBACIV,SAAUoB,GAAqB,QAC/B8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,UACLC,MAAoB,QAAf,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM4B,eAAO,QAAI,GACxB1C,SAAU,SAACC,GAAC,OAAK6B,GAAa,UAAW7B,EAAEC,OAAOH,MAAM,YAKxE,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA4B,eACrCrB,QAAS,kBAAMuB,GAAuB,iBAAiB,EACvDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAM6B,mBAE1B,iBAAMlD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,kCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOoB,eAAgBkD,WAAY7E,EAAQ,UACnE,kBACIV,SAAUoB,GAA4B,eACtC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,iBACLC,MAA2B,QAAtB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM6B,sBAAc,QAAI,GAC/B3C,SAAU,SAACC,GAAC,OAAK6B,GAAa,iBAAkB7B,EAAEC,OAAOH,MAAM,YAK/E,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAGtF,UAAU,4BAA2B,WAC3D,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA8B,iBACvCrB,QAAS,kBAAMuB,GAAuB,mBAAmB,EACzDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAM8B,qBAE1B,iBAAMnD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,kCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAE,UACrB,SAAC,KAAiB,CAACxG,QAASgD,GAAOqB,iBAAkBiD,WAAY7E,EAAQ,UACrE,SAAC8E,EAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAa,UAC5C,SAACC,EAAA,EAAS,CACN3F,SAAUoB,GAA8B,iBACxC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/BP,GAAG,mBACHwF,MAAM,GACNzG,UAAU,uBACVR,KAAK,QACLyG,KAAK,OACL3F,MAA6B,QAAxB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM8B,wBAAgB,QAAI,GACjC5C,SAAU,SAACC,GAAC,OAAK6B,GAAa,mBAAoB7B,EAAEC,OAAOH,MAAM,EACjEoG,aAAkB,OAAJrF,QAAI,IAAJA,OAAI,EAAJA,EAAM8B,6BAMxC,UAAC6B,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAGtF,UAAU,4BAA2B,WAC3D,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA0B,aACnCrB,QAAS,kBAAMuB,GAAuB,eAAe,EACrDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAM+B,iBAE1B,iBAAMpD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,gCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGG,GAAI,EAAGC,GAAI,EAAE,UACrB,SAAC,KAAiB,CAACxG,QAASgD,GAAOsB,aAAcgD,WAAY7E,EAAQ,UACjE,SAAC8E,EAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAa,UAC5C,SAACC,EAAA,EAAS,CACN3F,SAAUoB,GAA0B,aACpC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/BP,GAAG,eACHwF,MAAM,GACNzG,UAAU,uBACVR,KAAK,QACLyG,KAAK,OACL3F,MAAyB,QAApB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAM+B,oBAAY,QAAI,GAC7B7C,SAAU,SAACC,GAAC,OAAK6B,GAAa,eAAgB7B,EAAEC,OAAOH,MAAM,EAC7DoG,aAAkB,OAAJrF,QAAI,IAAJA,OAAI,EAAJA,EAAM+B,yBAMxC,UAAC4B,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA0B,aACnCrB,QAAS,kBAAMuB,GAAuB,eAAe,EACrDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAMgC,iBAE1B,iBAAMrD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,kCAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOuB,aAAc+C,WAAY7E,EAAQ,UACjE,SAAC8E,EAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAa,UAC5C,SAACI,EAAA,EAAU,CACP9F,SAAUoB,GAA0B,aACpCjC,UAAU,QACVyG,MAAM,IACNnG,MAAW,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMgC,aACb9C,SAAU,SAACqG,GAAI,OAAKvE,GAAa,eAAgBuE,EAAK,EACtDC,YAAa,SAACC,GAAM,OAAK,SAACN,EAAA,GAAS,UAAKM,GAAU,cAOtE,UAAC9B,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAAmB,MAC5BrB,QAAS,kBAAMuB,GAAuB,QAAQ,EAC9CgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAMiC,UAE1B,iBAAMtD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,0BAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOwB,MAAO8C,WAAY7E,EAAQ,UAC1D,kBACIV,SAAUoB,GAAmB,MAC7B8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,QACLC,MAAkB,QAAb,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMiC,aAAK,QAAI,GACtB/C,SAAU,SAACC,GAAC,OAAK6B,GAAa,QAAS7B,EAAEC,OAAOH,MAAM,YAKtE,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAAkB,KAC3BrB,QAAS,kBAAMuB,GAAuB,OAAO,EAC7CgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAMkC,SAE1B,iBAAMvD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,wBAEtD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAOyB,KAAM6C,WAAY7E,EAAQ,UACzD,kBACIV,SAAUoB,GAAkB,KAC5B8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,OACLC,MAAiB,QAAZ,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMkC,YAAI,QAAI,GACrBhD,SAAU,SAACC,GAAC,OAAK6B,GAAa,OAAQ7B,EAAEC,OAAOH,MAAM,YAKrE,UAAC0E,EAAA,EAAG,CAAChF,UAAU,OAAM,WACjB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,WAErC,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAc,UAAY,IACjEiE,QAASjE,GAA0B,aACnCrB,QAAS,kBAAMuB,GAAuB,eAAe,EACrDgE,iBAAoB,OAAJ9E,QAAI,IAAJA,IAAAA,EAAMmC,iBAE1B,iBAAMxD,UAAU,6BAEpB,SAACJ,EAAA,QAAU,CAACI,UAAU,6BAA4B,+BAItD,SAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EACjCtF,UAAU,4BAA2B,UAErC,SAAC,KAAiB,CAAClB,QAASgD,GAAO0B,aAAc4C,WAAY7E,EAAQ,UACjE,kBACIV,SAAUoB,GAA0B,aACpC8D,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,OACLjG,UAAS,+BACTK,KAAK,eACLC,MAAyB,QAApB,EAAM,OAAJe,QAAI,IAAJA,OAAI,EAAJA,EAAMmC,oBAAY,QAAI,GAC7BjD,SAAU,SAACC,GAAC,OAAK6B,GAAa,eAAgB7B,EAAEC,OAAOH,MAAM,iBAOrF,eAAIN,UAAU,6BAA4B,mCACzCqB,GAAQA,EAAKmB,OAASnB,EAAKmB,MAAMuE,OAAS,EACvC1F,EAAKmB,MAAMC,KAAI,SAACC,EAAWsE,GAAU,aACjC,gBAAmBhH,UAAU,gBAAe,UACxC,SAAC,KAAiB,CAAClB,QAAS6C,GAAW,QAAD,OAASe,EAAKzB,KAAOmF,WAAY7E,EAAQ,UAC3E,SAACsE,EAAA,EAAI,CACD7F,UAAU,aACVuF,MAAO,CACHO,OAAQkB,IAAUzF,EAAU,oBAAsB,qBAEtDX,QAAS,kBAAMY,EAAWwF,EAAM,EAAC,UAEjC,UAAChC,EAAA,EAAG,CAAChF,UAAU,MAAK,WAChB,UAACiF,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGtF,UAAU,4BAA2B,WACzE,UAACJ,EAAA,QAAU,CAACI,UAAU,gDAA+C,WACjE,SAACJ,EAAA,UAAY,CACTqG,KAAK,WACL5F,KAAK,aACLL,UAAS,mCAA8BiC,GAAYS,EAAKzB,IAAM,UAAY,IAC1EL,QAAS,kBAAMuB,GAAuBO,EAAKzB,GAAG,EAC9CkF,eAAgBlE,GAAYS,EAAKzB,OAErC,iBAAMjB,UAAU,6BAEpB,SAACiH,EAAA,EAAS,CAACjH,UAAU,8CAA6C,UAC9D,kBACIa,SAAUoB,GAAYS,EAAKzB,IAC3B8E,QAAS,kBAAMvE,GAAW,EAAK,EAC/BwE,OAAQ,kBAAMxE,GAAW,EAAM,EAC/ByE,KAAK,SACLjG,UAAS,2BACTM,MAAiB,QAAZ,EAAEoC,EAAKpC,aAAK,QAAI,GACrBC,SAAU,SAACC,GAAC,OAAK6B,GAAaK,EAAKzB,GAAIT,EAAEC,OAAOH,MAAM,UAKlE,SAAC2E,EAAA,EAAG,CAACC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGtF,UAAU,4BAA2B,UACzE,SAACJ,EAAA,QAAU,CAACI,UAAU,aAAY,SAAE0C,EAAKrC,iBAnCnDqC,EAAKzB,GAwCT,KAGV,gBAAKjB,UAAU,cAAa,2DAIxC,SAACgF,EAAA,EAAG,CAAChF,UAAU,uCAAsC,UACjD,SAACU,EAAA,EAAM,CACHC,QAAQ,UACRE,SAjsBU,WAAO,IAAD,EAC5BqG,GAAS,EACTtC,EAAWvD,IAAkB,QAAV,EAAAA,EAAKmB,aAAK,aAAV,EAAYuE,QAAS,GAK5C,OAJsBI,OAAOC,OAAOnF,IAAaoF,QAAO,SAAC3E,GAAS,OAAc,IAATA,CAAa,IAClEqE,SAAWnC,IACzBsC,GAAS,GAENA,CACX,CAyrB8BI,GACV1G,QAAS,kBAAMa,GAAa,EAAK,EAAC,8BAS1D,C","sources":["components/Nexos/pages/ContractedAssamblies/Verifications/ModalVerification.tsx","components/Nexos/pages/ContractedAssamblies/Verifications/Verifications.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { Modal, Button, Form, Row, Col } from \"react-bootstrap\";\nimport { TitleComponent } from \"../../../Global/TitleComponent\";\n\nconst ModalVerification = ({\n  data,\n  showModal,\n  onClose,\n  onSubmit,\n  quote_number,\n  message,\n  setMessage\n}: any) => {\n  const [status, setStatus] = useState(\"\");\n\n  const handleModalClose = async () => {\n    onClose()\n    setMessage('')\n  };\n  const isMessageEmpty = message.trim() === \"\";\n\n  const handleFormSubmit = (status: string) => {\n    if (status === 'rechazado') {\n      setStatus('rechazado')\n    } else {\n      setStatus('verificado')\n    }\n    if (isMessageEmpty) {\n    } else {\n      onSubmit({ message, status });\n    }\n  };\n\n  return (\n    <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      show={showModal}\n      onHide={handleModalClose}\n      keyboard={false}\n    >\n      <Modal.Body>\n        <Form.Group>\n          <TitleComponent title=\"CASTILLA RESERVADO\"  align=\"center\" />\n\n          <h5 className=\"text-center\"> Tipo de asamblea: <b className=\"text-primary text-uppercase\">   {data.meeting_type}</b> </h5>\n          <h5 className=\"text-center\"> Número de cotización: <b className=\"text-primary text-uppercase\">  {quote_number} </b> </h5>\n          <hr />\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Motivo:</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={4}\n            name=\"message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </Form.Group>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button\n          variant=\"dark\"\n          onClick={handleModalClose}>\n          Volver\n        </Button>\n        <Button\n          variant=\"danger\"\n          disabled={isMessageEmpty}\n          onClick={() => handleFormSubmit('rechazado')}>\n          Rechazado\n        </Button>\n        <Button\n          disabled={isMessageEmpty}\n          variant=\"primary\"\n          onClick={() => handleFormSubmit('verificado')}\n        >\n          Verificado\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ModalVerification;\n/* \n\n{endpoint}/management/api/sales/rejection/save\nPOST\nparámetros:\n- message : String\n- quote_number : número de cotización\n- meeting_type : tipo de cotización\nEjemplo:\n{\n    \"message\":\"hello\",\n    \"quote_number\":\"98UIJK\",\n    \"meeting_type\":\"Mixta\"\n}\nLa respuesta puede ser:\n{\n    \"success\": true,\n    \"message\": \"Mensaje guardado con éxito\"\n}\nSi falló:\n{\n    \"success\": false,\n    \"message\": \"No se pudo procesar su petición\"\n}\n\n*/","import { useEffect, useState } from \"react\";\nimport { Button, Card, Col, Form, FormGroup, Row } from \"react-bootstrap\"\nimport { useErrors, useFetch } from \"../../../hooks\";\nimport { BreadCrumb, InputErrorMessage, PDFViewer,/*  InputErrorMessage, PDFViewer  */ } from \"../../../Global\";\n/* material ui */\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';\nimport { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';\nimport TextField from '@mui/material/TextField';\nimport ModalVerification from \"./ModalVerification\";\nimport { useLocation } from \"react-router-dom\";\nimport validator from \"validator\";\n\n/* date */\nimport dayjs from \"dayjs\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\n\nconst Verifications = () => {\n    const location: any = useLocation();\n    const { state } = location;\n    const quote_id = state.id\n\n    const { getAllData, postData } = useFetch()\n    const [form, setForm] = useState<any>({});\n    const [onfocus, setOnfocus] = useState(false);\n    const [showModal, setShowModal] = useState(false);\n    const [dataPDF, setDataPDF] = useState<string>(\"https://nexos-cdn.sfo3.cdn.digitaloceanspaces.com/Quotes/quote-virtual.pdf\")\n    const [message, setMessage] = useState(\"\");\n    const [itemErrors, setItemErrors] = useState<{ [key: string]: string }>({});\n    const { errors, setError, clearError } = useErrors();\n    const [fieldChecks, setFieldChecks] = useState<Record<string, boolean>>({});\n\n    const handleFieldCheckChange = (fieldName: string) => {\n        setFieldChecks({ ...fieldChecks, [fieldName]: !fieldChecks[fieldName] });\n    };\n    \n    const handleValidateChecked = () => {\n        let result = true\n        let quantity = form && form.items?.length + 10\n        const checkedValues = Object.values(fieldChecks).filter((item: any) => item === true)\n        if (checkedValues.length === quantity) {\n            result = false\n        }\n        return result\n    }\n\n    // Función para validar errores en el formulario\n    const validateErrors = (nameData: string, valueData: any) => {\n        const validationErrors: any = { ...errors };\n        if (nameData === \"name\") {\n            if (validator.isEmpty(valueData)) {\n                validationErrors.name = [\"El campo nombre es obligatorio\"];\n            } else {\n                delete validationErrors.name;\n            }\n        }\n        if (nameData === \"nit\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.nit = \"El campo NIT es obligatorio.\";\n            } else {\n                delete validationErrors.nit;\n            }\n        }\n        if (nameData === \"meeting_type\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.meeting_type = \"El campo Tipo de Asamblea es obligatorio.\";\n            } else {\n                delete validationErrors.meeting_type;\n            }\n        }\n        if (nameData === \"client_name\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.client_name = \"El campo Nombre del Cliente es obligatorio.\";\n            } else {\n                delete validationErrors.client_name;\n            }\n        }\n        if (nameData === \"address\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.address = \"El campo Dirección del Comercio es obligatorio.\";\n            } else {\n                delete validationErrors.address;\n            }\n        }\n        if (nameData === \"contact_person\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.contact_person = \"El campo Nombre del Encargado es obligatorio.\";\n            } else {\n                delete validationErrors.contact_person;\n            }\n        }\n        if (nameData === \"meeting_register\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.meeting_register = \"El campo Hora de Registro es obligatorio.\";\n            } else {\n                delete validationErrors.meeting_register;\n            }\n        }\n        if (nameData === \"meeting_init\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.meeting_init = \"El campo Hora de Inicio es obligatorio.\";\n            } else {\n                delete validationErrors.meeting_init;\n            }\n        }\n        if (nameData === \"meeting_date\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.meeting_date = \"El campo Fecha del Evento es obligatorio.\";\n            } else {\n                delete validationErrors.meeting_date;\n            }\n        }\n        if (nameData === \"phone\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.phone = \"El campo Teléfono es obligatorio.\";\n            } else {\n                delete validationErrors.phone;\n            }\n        }\n        if (nameData === \"city\") {\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.city = \"El campo Ciudad es obligatorio.\";\n            } else {\n                delete validationErrors.city;\n            }\n        }\n        if (nameData === \"observations\") {\n\n            if (validator.isEmpty(valueData)) {\n\n                validationErrors.observations = \"El campo Observaciones es obligatorio.\";\n            } else {\n                delete validationErrors.observations;\n            }\n        }\n\n        const newErrors = { ...itemErrors };\n        form.items.forEach((item: any) => {\n            if (item.id === nameData) {\n                if (valueData === \"\" || valueData === \" \" || valueData === null || valueData === undefined || valueData === \"0\") {\n                    newErrors[`item-${item.id}`] = `El campo para ${item.name} es obligatorio.`;\n                } else if (parseFloat(valueData) < 0) {\n                    newErrors[`item-${item.id}`] = `El valor para ${item.name} no puede ser un número negativo.`;\n                } else {\n                    delete newErrors[`item-${item.id}`];\n                }\n            }\n        });\n\n        setItemErrors(newErrors);\n        // Establecer errores\n        setError(\"nit\", validationErrors.nit);\n        setError(\"meeting_type\", validationErrors.meeting_type);\n        setError(\"client_name\", validationErrors.client_name);\n        setError(\"address\", validationErrors.address);\n        setError(\"contact_person\", validationErrors.contact_person);\n        setError(\"meeting_register\", validationErrors.meeting_register);\n        setError(\"meeting_init\", validationErrors.meeting_init);\n        setError(\"meeting_date\", validationErrors.meeting_date);\n        setError(\"phone\", validationErrors.phone);\n        setError(\"city\", validationErrors.city);\n        setError(\"observations\", validationErrors.observations);\n    };\n\n    // Manejar cambios en los campos del formulario\n    const handleChange = (name: any, value: any) => {\n        setForm((prevForm: any) => {\n            const updatedForm = { ...prevForm };\n            if (typeof name === 'number') {\n                updatedForm.items = updatedForm.items.map((item: any) => {\n                    if (item.id === name) {\n                        return {\n                            ...item,\n                            value: value,\n                        };\n                    }\n                    return item;\n                });\n            } else {\n                updatedForm[name] = value;\n            }\n            return updatedForm;\n        });\n        clearError(name);\n        validateErrors(name, value);\n    };\n\n    const handleSubmit = async (modalData: any) => {\n        const items = form.items && form.items.map((item: any) => ({ id: item.id, value: item.value }));\n        const meetingRegisterTime = form.meeting_register;\n        const meetingInitTime = form.meeting_init;\n\n        const payload = {\n            items,\n            quote_id: quote_id,\n            meeting_register: meetingRegisterTime,\n            meeting_init: meetingInitTime,\n            meeting_date: dayjs(form.meeting_date).format(\"YYYY-MM-DD\"),\n            meeting_type: form.meeting_type,\n            address: form.address,\n            city: form.city,\n            name: form.client_name,\n            contact_person: form.contact_person,\n            contact_phone: form.contact_phone,\n            nit: form.nit,\n            observations: form.observations,\n            phone: form.phone,\n            status: modalData.status,\n            description: modalData.message,\n        };\n\n        await postData(payload, \"sales/order/verification/edit\");\n        setShowModal(false)\n        setMessage('')\n    };\n\n    useEffect(() => {\n        const getData = async () => {\n            try {\n                const responseInputs: any = await getAllData(`api/sales/order/verification/${quote_id}`);\n                setForm({\n                    id: 0,\n                    status: \"\",\n                    horaDeRegistro: responseInputs.meeting_register === \"None\" ? \"\" : responseInputs.meeting_register || form.meeting_register,\n                    horaDeInicio: responseInputs.meeting_init === \"None\" ? \"\" : responseInputs.meeting_init || form.meeting_init,\n                    meeting_date: responseInputs.meeting_date === \"None\" ? null : responseInputs.meeting_date || \"\",\n                    address: responseInputs.address || \"\",\n                    city: responseInputs.city || \"\",\n                    client_name: responseInputs.client_name || \"\",\n                    contact_person: responseInputs.contact_person || \"\",\n                    contact_phone: responseInputs.contact_phone || \"\",\n                    items: responseInputs.items\n                        ? responseInputs.items.map((item: any) => ({\n                            id: item.id,\n                            name: item.name,\n                            value: item.quantity || \"\",\n                        }))\n                        : [],\n                    meeting_register: responseInputs.meeting_register === \"None\" ? \"\" : responseInputs.meeting_register || \"\",\n                    meeting_init: responseInputs.meeting_init === \"None\" ? \"\" : responseInputs.meeting_init || \"\",\n                    meeting_type: responseInputs.meeting_type || \"\",\n                    nit: responseInputs.nit || \"\",\n                    observations: responseInputs.observations || \"\",\n                    phone: responseInputs.phone || \"\",\n                });\n            } catch (error) {\n                console.log(\"error\", error);\n            }\n        };\n        getData();\n    }, []);\n\n    return (\n        <>\n            {/* breadcrumb */}\n            < BreadCrumb\n                items={[\"INICIO\", \"RESERVAS\"]}\n                baseURL={[\"/\", \"nexos/verificaciones\"]}\n            />\n            {/* Modal Confirmation */}\n            <ModalVerification\n                data={form}\n                quote_number={quote_id}\n                showModal={showModal}\n                onClose={() => setShowModal(false)}\n                onSubmit={handleSubmit}\n                message={message}\n                setMessage={setMessage}\n            />\n\n            {/* All Forms */}\n            <div className=\" mt-4\">\n                <Row>\n                    {/* PDF */}\n                    <Col xs={12} sm={12} md={12} lg={7} xl={7}>\n                        <h4 className=\"text-center text-uppercase\">Evidencia cargada por la reserva</h4>\n                        <div style={{\n                            position: 'sticky',\n                            top: 70,\n                            height: 'calc(100vh - 150px)',\n                            overflow: 'auto'\n                        }}>\n                            <PDFViewer pdfUrl={dataPDF} />\n                        </div>\n                    </Col>\n\n                    {/* Verification form data  */}\n                    <Col xs={12} sm={12} md={12} lg={5} xl={5}>\n                        <h4 className=\"text-center text-uppercase\">verificación</h4>\n                        <Card className=\"p-3\"\n                            style={{\n                                border: \"3px solid #ced4da\",\n                            }}\n                        >\n                            <Form className=\"form-horizontal\">\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"form-label\">NIT</Form.Label>\n                                    </Col>\n                                    <Col xs={6} sm={6} md={6} lg={6} xl={6}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <input\n                                            disabled={true} //fieldChecks[\"nit\"]\n                                            onFocus={() => setOnfocus(true)}\n                                            onBlur={() => setOnfocus(false)}\n                                            type=\"text\"\n                                            className={`form-control text-capitalize`}\n                                            name=\"nit\"\n                                            value={form?.nit ?? \"\"}\n                                            onChange={(e) => handleChange(\"nit\", e.target.value)}\n                                        />\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"meeting_type\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"meeting_type\"]}\n                                                onClick={() => handleFieldCheckChange(\"meeting_type\")}\n                                                defaultChecked={form?.meeting_type ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            tipo de asamblea\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.meeting_type} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"meeting_type\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"meeting_type\"\n                                                value={form?.meeting_type ?? \"\"}\n                                                onChange={(e) => handleChange(\"meeting_type\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"client_name\"]}\n                                                onClick={() => handleFieldCheckChange(\"client_name\")}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Nombre cliente\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.client_name} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"client_name\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"client_name\"\n                                                value={form?.client_name ?? \"\"}\n                                                onChange={(e) => handleChange(\"client_name\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"address\"]}\n                                                onClick={() => handleFieldCheckChange(\"address\")}\n                                                defaultChecked={form?.address ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Direccion comercio\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.address} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"address\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"address\"\n                                                value={form?.address ?? \"\"}\n                                                onChange={(e) => handleChange(\"address\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"contact_person\"]}\n                                                onClick={() => handleFieldCheckChange(\"contact_person\")}\n                                                defaultChecked={form?.contact_person ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Nombre encargado\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.contact_person} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"contact_person\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"contact_person\"\n                                                value={form?.contact_person ?? \"\"}\n                                                onChange={(e) => handleChange(\"contact_person\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} lg={4} xl={4} className=\"d-flex align-items-center\">\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"meeting_register\"]}\n                                                onClick={() => handleFieldCheckChange(\"meeting_register\")}\n                                                defaultChecked={form?.meeting_register ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Hora de registro\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} lg={8} xl={8}>\n                                        <InputErrorMessage message={errors.meeting_register} inputFocus={onfocus}>\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                                <TextField\n                                                    disabled={fieldChecks[\"meeting_register\"]}\n                                                    onFocus={() => setOnfocus(true)}\n                                                    onBlur={() => setOnfocus(false)}\n                                                    id=\"meeting_register\"\n                                                    label=\"\"\n                                                    className=\"w-100 cursor-pointer\"\n                                                    size=\"small\"\n                                                    type=\"time\"\n                                                    value={form?.meeting_register ?? \"\"}\n                                                    onChange={(e) => handleChange(\"meeting_register\", e.target.value)}\n                                                    defaultValue={form?.meeting_register}\n                                                />\n                                            </LocalizationProvider>\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} lg={4} xl={4} className=\"d-flex align-items-center\">\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"meeting_init\"]}\n                                                onClick={() => handleFieldCheckChange(\"meeting_init\")}\n                                                defaultChecked={form?.meeting_init ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Hora de inicio\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} lg={8} xl={8}>\n                                        <InputErrorMessage message={errors.meeting_init} inputFocus={onfocus}>\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                                <TextField\n                                                    disabled={fieldChecks[\"meeting_init\"]}\n                                                    onFocus={() => setOnfocus(true)}\n                                                    onBlur={() => setOnfocus(false)}\n                                                    id=\"meeting_init\"\n                                                    label=\"\"\n                                                    className=\"w-100 cursor-pointer\"\n                                                    size=\"small\"\n                                                    type=\"time\"\n                                                    value={form?.meeting_init ?? \"\"}\n                                                    onChange={(e) => handleChange(\"meeting_init\", e.target.value)}\n                                                    defaultValue={form?.meeting_init}\n                                                />\n                                            </LocalizationProvider>\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"meeting_date\"]}\n                                                onClick={() => handleFieldCheckChange(\"meeting_date\")}\n                                                defaultChecked={form?.meeting_date ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Fecha del evento\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.meeting_date} inputFocus={onfocus}>\n                                            <LocalizationProvider dateAdapter={AdapterDayjs}>\n                                                <DatePicker\n                                                    disabled={fieldChecks[\"meeting_date\"]}\n                                                    className=\"w-100\"\n                                                    label=\" \"\n                                                    value={form?.meeting_date}\n                                                    onChange={(date) => handleChange(\"meeting_date\", date)}\n                                                    renderInput={(params) => <TextField {...params} />}\n                                                />\n                                            </LocalizationProvider>\n                                        </InputErrorMessage>\n                                    </Col>\n\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"phone\"]}\n                                                onClick={() => handleFieldCheckChange(\"phone\")}\n                                                defaultChecked={form?.phone ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Telefono\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.phone} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"phone\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"phone\"\n                                                value={form?.phone ?? \"\"}\n                                                onChange={(e) => handleChange(\"phone\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"city\"]}\n                                                onClick={() => handleFieldCheckChange(\"city\")}\n                                                defaultChecked={form?.city ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">ciudad</Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.city} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"city\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"city\"\n                                                value={form?.city ?? \"\"}\n                                                onChange={(e) => handleChange(\"city\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                                <Row className=\"mt-1\">\n                                    <Col xs={4} sm={4} md={4} lg={4} xl={4}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                            <Form.Control\n                                                type=\"checkbox\"\n                                                name=\"is_default\"\n                                                className={`p-0 custom-control-input ${fieldChecks ? 'checked' : ''}`}\n                                                checked={fieldChecks[\"observations\"]}\n                                                onClick={() => handleFieldCheckChange(\"observations\")}\n                                                defaultChecked={form?.observations ? true : false}\n                                            />\n                                            <span className=\"custom-control-label\"></span>\n                                        </Form.Label>\n                                        <Form.Label className=\"form-label text-capitalize\">\n                                            Observaciones\n                                        </Form.Label>\n                                    </Col>\n                                    <Col xs={8} sm={8} md={8} lg={8} xl={8}\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <InputErrorMessage message={errors.observations} inputFocus={onfocus}>\n                                            <input\n                                                disabled={fieldChecks[\"observations\"]}\n                                                onFocus={() => setOnfocus(true)}\n                                                onBlur={() => setOnfocus(false)}\n                                                type=\"text\"\n                                                className={`form-control text-capitalize`}\n                                                name=\"observations\"\n                                                value={form?.observations ?? \"\"}\n                                                onChange={(e) => handleChange(\"observations\", e.target.value)}\n                                            />\n                                        </InputErrorMessage>\n                                    </Col>\n                                </Row>\n                            </Form>\n                        </Card>\n                        <h4 className=\"text-center text-uppercase\"> Servicios o equipos </h4>\n                        {form && form.items && form.items.length > 0 ? (\n                            form.items.map((item: any, index: any) => (\n                                <div key={item.id} className=\"m-0 p-0 w-100\">\n                                    <InputErrorMessage message={itemErrors[`item-${item.id}`]} inputFocus={onfocus}>\n                                        <Card\n                                            className=\"mb-2 w-100\"\n                                            style={{\n                                                border: index === onfocus ? \"3px solid #ff671c\" : \"3px solid #ced4da\",\n                                            }}\n                                            onClick={() => setOnfocus(index)}\n                                        >\n                                            <Row className=\"p-2\">\n                                                <Col xs={4} sm={4} md={4} lg={4} xl={4} className=\"d-flex align-items-center\">\n                                                    <Form.Label className=\"custom-control custom-checkbox cursor-pointer\">\n                                                        <Form.Control\n                                                            type=\"checkbox\"\n                                                            name=\"is_default\"\n                                                            className={`p-0 custom-control-input ${fieldChecks[item.id] ? 'checked' : ''}`}\n                                                            onClick={() => handleFieldCheckChange(item.id)}\n                                                            defaultChecked={fieldChecks[item.id]}\n                                                        />\n                                                        <span className=\"custom-control-label\"></span>\n                                                    </Form.Label>\n                                                    <FormGroup className=\"form-group d-flex align-items-center m-auto\">\n                                                        <input\n                                                            disabled={fieldChecks[item.id]}\n                                                            onFocus={() => setOnfocus(true)}\n                                                            onBlur={() => setOnfocus(false)}\n                                                            type=\"number\"\n                                                            className={`form-control text-center`}\n                                                            value={item.value ?? \"\"}\n                                                            onChange={(e) => handleChange(item.id, e.target.value)}\n                                                        />\n\n                                                    </FormGroup>\n                                                </Col>\n                                                <Col xs={8} sm={8} md={8} lg={8} xl={8} className=\"d-flex align-items-center\">\n                                                    <Form.Label className=\"form-label\">{item.name}</Form.Label>\n                                                </Col>\n                                            </Row>\n                                        </Card>\n                                    </InputErrorMessage>\n                                </div>\n                            ))\n                        ) : (\n                            <div className=\"text-center\">No se contrataron servicios o equipos.</div>\n                        )}\n                    </Col>\n                </Row>\n                <Row className=\"d-flex justify-content-end my-4 me-2\">\n                    <Button\n                        variant=\"primary\"\n                        disabled={handleValidateChecked()}\n                        onClick={() => setShowModal(true)}\n                    >\n                        Continuar\n                    </Button>\n                </Row>\n            </div >\n        </>\n\n    )\n}\n\nexport default Verifications\n"],"names":["data","showModal","onClose","onSubmit","quote_number","message","setMessage","useState","setStatus","handleModalClose","isMessageEmpty","trim","handleFormSubmit","status","Modal","size","show","onHide","keyboard","Form","TitleComponent","title","align","className","meeting_type","controlId","as","rows","name","value","onChange","e","target","Button","variant","onClick","disabled","quote_id","useLocation","state","id","useFetch","getAllData","postData","form","setForm","onfocus","setOnfocus","setShowModal","dataPDF","itemErrors","setItemErrors","useErrors","errors","setError","clearError","fieldChecks","setFieldChecks","handleFieldCheckChange","fieldName","handleChange","prevForm","updatedForm","items","map","item","nameData","valueData","validationErrors","validator","nit","client_name","address","contact_person","meeting_register","meeting_init","meeting_date","phone","city","observations","newErrors","forEach","undefined","parseFloat","validateErrors","handleSubmit","modalData","meetingRegisterTime","meetingInitTime","payload","dayjs","format","contact_phone","description","useEffect","getData","responseInputs","horaDeRegistro","horaDeInicio","quantity","console","log","baseURL","Row","Col","xs","sm","md","lg","xl","style","position","top","height","overflow","pdfUrl","Card","border","onFocus","onBlur","type","checked","defaultChecked","inputFocus","LocalizationProvider","dateAdapter","AdapterDayjs","TextField","label","defaultValue","DatePicker","date","renderInput","params","length","index","FormGroup","result","Object","values","filter","handleValidateChecked"],"sourceRoot":""}