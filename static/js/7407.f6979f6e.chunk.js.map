{"version":3,"file":"static/js/7407.f6979f6e.chunk.js","mappings":"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","sources":["components/Nexos/Global/TitleComponent.tsx","components/Nexos/Global/BasicDataTable.tsx","components/Nexos/Global/BreadCrumb.tsx","components/Nexos/Global/ConfirmationCardButton.tsx","components/Nexos/Global/InputErrorMessage.tsx","components/Nexos/Global/Loader.tsx","components/Nexos/Global/PDFViewer.tsx","components/Nexos/ServiciosACotizar/ServiciosACotizar.tsx","components/Nexos/pages/Seguimiento/ModalSeguimientoOrganizacion.tsx"],"sourcesContent":["type Title = {\n    title?: string,\n    align?: string,\n    subtitle?: string,\n    description?: string,\n}\nexport const TitleComponent = ({ title = \"\", align = 'left', subtitle = \"\", description = \"\" }: Title) => {\n    return (\n        <>\n            <div className={`mt-4 mb-3 text-${align}`}>\n                {title && (\n                    <h2 className=\"text-uppercase p-0 m-0 fw-bold\" >{title}</h2>\n                )}\n                {subtitle && (\n                    <h4 className={`text-${align} text-uppercase`} >{subtitle}</h4>\n                )}\n                {description && (\n                    <p className={`text-${align} text-uppercase`} >{description}</p>\n                )}\n            </div>\n        </>\n    )\n}","import React from \"react\";\nimport { Button, Form, Card } from \"react-bootstrap\";\nimport {\n  useTable,\n  useSortBy,\n  useGlobalFilter,\n  usePagination,\n} from \"react-table\";\nimport { Link } from \"react-router-dom\";\nimport { ConfirmationCardButton, Loader } from \"./\";\n/* Date Filter */\nimport dayjs, { Dayjs } from \"dayjs\";\nimport TextField from \"@mui/material/TextField\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { DesktopDatePicker } from \"@mui/x-date-pickers/DesktopDatePicker\";\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\n\n// Interface for table props\ninterface TableProps {\n  data: any[];\n  columns: any[];\n  addButtonLink?: string;\n  addButtonState?: any;\n  searchFilter?: boolean;\n  filterDate?: boolean;\n  date?: string;\n  isLoading?: boolean;\n  btnText?: string;\n  exceptionTitleText?: string;\n  exceptionSubtitleText?: string;\n  handleChange?: (newValue: Dayjs | null) => void;\n  value?: Dayjs | null;\n  totalFunc?: () => void; // Include the totalFunc prop here\n}\n\n// BasicDataTable component\nexport const BasicDataTable: React.FC<TableProps> = ({\n  data,\n  columns,\n  addButtonLink = \"\",\n  addButtonState = {},\n  searchFilter = true,\n  filterDate = false,\n  value,\n  isLoading,\n  exceptionTitleText = \"La tabla está vacía\",\n  exceptionSubtitleText = \"No hay datos\",\n  btnText = \"AGREGAR NUEVO\",\n  date,\n  handleChange,\n  totalFunc,\n}) => {\n  // Get table instance with sorting, global filtering, and pagination hooks\n  const tableInstance = useTable(\n    {\n      columns: columns,\n      data: data,\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination\n  );\n\n  // Destructure the properties from the table instance\n  const {\n    getTableProps,\n    headerGroups,\n    getTableBodyProps,\n    prepareRow,\n    state,\n    setGlobalFilter,\n    page,\n    nextPage,\n    previousPage,\n    canNextPage,\n    canPreviousPage,\n    pageOptions,\n    setPageSize,\n  }: any = tableInstance;\n\n  const { globalFilter, pageIndex, pageSize } = state;\n\n  const isDataEmpty = !isLoading && data.length === 0;\n\n  return (\n    <>\n      <div className=\"w-100 text-end mb-2\">\n        {/* filter date */}\n        {filterDate && handleChange ? (\n          <LocalizationProvider\n            style={{ height: 10 }}\n            dateAdapter={AdapterDayjs}\n          >\n            <DesktopDatePicker\n              className=\"ms-3 text-primary\"\n              label=\"Fecha Actual\"\n              inputFormat=\"DD/MM/YYYY\"\n              value={value || dayjs()}\n              onChange={(newValue) => handleChange(newValue)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n          </LocalizationProvider>\n        ) : null}\n      </div>\n\n      {/* Card for search and add button */}\n      {searchFilter && (\n        <Card>\n          <Card.Body className=\"p-0 px-2 pt-4\">\n            <div className=\"d-flex justify-content-evenly\">\n              {/* Global filter component */}\n              <GlobalFilter\n                filter={globalFilter}\n                setFilter={setGlobalFilter}\n                hasAddButton={!!addButtonLink}\n              />\n              {/* AddButton */}\n              {addButtonLink === \"\" ? null : (\n                <Link\n                  to={addButtonLink}\n                  state={addButtonState}\n                  className=\"text-muted ms-sm-3\"\n                >\n                  <p className=\"btn btn-primary d-block d-md-none p-2 px-3\">\n                    +\n                  </p>\n                  <Button\n                    style={{}}\n                    className=\"btn btn-primary d-none d-md-block\"\n                  >\n                    {btnText}\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </Card.Body>\n        </Card>\n      )}\n\n      {/* Card for displaying the table */}\n      <Card className=\"mt-0\">\n        <Card.Body className=\"p-0\">\n          {isLoading && ( // Shows loader if data is empty\n            <Loader />\n          )}\n\n          {isDataEmpty && (\n            <ConfirmationCardButton\n              baseURL=\"#\"\n              title={exceptionTitleText}\n              subtitle={exceptionSubtitleText}\n            />\n          )}\n\n          {!isLoading && data.length > 0 && (\n            <div\n              className=\"table-responsive rounded\"\n              style={{ borderTop: \"1px solid #9c9ca1\" }}\n            >\n              <table {...getTableProps()} className=\"table table-hover mb-0\">\n                <thead>\n                  {/* Render header rows */}\n                  {headerGroups.map((headerGroup: any) => (\n                    <tr {...headerGroup.getHeaderGroupProps()}>\n                      {headerGroup.headers.map((column: any) => (\n                        <th\n                          {...column.getHeaderProps(\n                            column.getSortByToggleProps()\n                          )}\n                          className={column.className}\n                          style={{\n                            borderRight: \"1px solid #9c9ca1\",\n                            borderLeft: \"1px solid #9c9ca1\",\n                          }}\n                        >\n                          {/* Show column header */}\n                          <span className=\"tabletitle\">\n                            {column.render(\"Header\")}\n                          </span>\n\n                          {/* Show sort icons */}\n                          <span>\n                            {column.isSorted ? (\n                              column.isSortedDesc ? (\n                                <i className=\"fa fa-angle-down\"></i>\n                              ) : (\n                                <i className=\"fa fa-angle-up\"></i>\n                              )\n                            ) : (\n                              \"\"\n                            )}\n                          </span>\n                        </th>\n                      ))}\n                    </tr>\n                  ))}\n                </thead>\n                <tbody {...getTableBodyProps()}>\n                  {/* Render data rows */}\n                  {page.map((row: any) => {\n                    prepareRow(row);\n                    return (\n                      <tr {...row.getRowProps()}>\n                        {row.cells.map((cell: any) => {\n                          return (\n                            <td\n                              className=\"borderrigth\"\n                              {...cell.getCellProps()}\n                              style={{\n                                borderTop: \"1px solid #9c9ca1\",\n                                borderBottom: \"1px solid #9c9ca1\",\n                              }}\n                            >\n                              {/* Show cell content */}\n                              {cell.render(\"Cell\")}\n                            </td>\n                          );\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n          )}\n        </Card.Body>\n      </Card>\n      {/* Conditionally render the TotalCard component */}\n      {totalFunc && totalFunc()}\n\n      {/* Card for pagination */}\n      <Card className=\"mt-2\">\n        <Card.Body className=\"px-3 py-1 \">\n          <div className=\"d-flex align-items-center d-sm-flex m-0 p-0\">\n            <span className=\"\">\n              {/* Show page index and page count */}\n              Pagina{\" \"}\n              <strong>\n                {pageIndex + 1} de {pageOptions.length}\n              </strong>{\" \"}\n            </span>\n            <span className=\"ms-sm-auto\">\n              {/* Pagination buttons */}\n              <Button\n                variant=\"\"\n                className=\"btn-default tablebutton me-2 my-1\"\n                onClick={() => previousPage()}\n                disabled={!canPreviousPage}\n              >\n                {\" << \"}\n              </Button>\n              <Button\n                variant=\"\"\n                className=\"btn-default tablebutton me-2 my-1\"\n                onClick={() => previousPage()}\n                disabled={!canPreviousPage}\n              >\n                {\" < \"}\n              </Button>\n              <Button\n                variant=\"\"\n                className=\"btn-default tablebutton me-2 my-1\"\n                onClick={() => nextPage()}\n                disabled={!canNextPage}\n              >\n                {\" > \"}\n              </Button>\n              <Button\n                variant=\"\"\n                className=\"btn-default tablebutton me-2 my-1\"\n                onClick={() => nextPage()}\n                disabled={!canNextPage}\n              >\n                {\" >> \"}\n              </Button>\n            </span>\n            {/* Select dropdown for page size */}\n            <select\n              className=\"p-2 selectpage border me-1\"\n              value={pageSize}\n              onChange={(e) => setPageSize(Number(e.target.value))}\n            >\n              {[10, 25, 50].map((pageSize) => (\n                <option key={pageSize} value={pageSize}>\n                  Mostrar {pageSize}\n                </option>\n              ))}\n            </select>\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\n// GlobalFilter component\nconst GlobalFilter = ({ filter, setFilter, hasAddButton }: any) => {\n  return (\n    <span className={`d-flex ${hasAddButton ? \"w-75\" : \"w-100\"}`}>\n      <Form.Control\n        value={filter || \"\"}\n        onChange={(e) => setFilter(e.target.value)}\n        className=\"form-control mb-4\"\n        placeholder=\"Search...\"\n      />\n    </span>\n  );\n};\n","import React from \"react\";\nimport { Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadCrumbProps {\n    items: string[];\n    baseURL: string[];\n}\n\nexport const BreadCrumb: React.FC<BreadCrumbProps> = ({ items, baseURL }) => {\n    \n    if (!Array.isArray(items) || items.length === 0 || !Array.isArray(baseURL) || baseURL.length !== items.length) {\n        return null; // Return null if the items array is empty, baseURL is not an array, or the lengths of items and baseURL don't match\n    }\n    return (\n        <div className=\"breadcrumb-header justify-content-between\">\n            <div className=\"left-content\">\n                {/*<span className=\"main-content-title mg-b-0 mg-b-lg-1\">EMPTY PAGE</span>*/}\n                <div className=\"main-img-user avatar-lg\">\n                    <img\n                        alt=\"avatar\"\n                        className=\"rounded-circle\"\n                        src={require(\"../../../assets/img/brand/logo-nexos2.png\")}\n                    />\n                </div>\n            </div>\n            <div className=\"justify-content-center mt-3 align-items-center\">\n                <Breadcrumb className=\"breadcrumb\">\n                    {items.map((item, index) => (\n                        <Breadcrumb.Item\n                            key={index}\n                            href={\n                                index === items.length - 1\n                                    ? undefined\n                                    : `${process.env.PUBLIC_URL}/${baseURL[index].toLowerCase()}`\n                            }\n                            className={\n                                index === items.length - 1\n                                    ? \"breadcrumb-item active\"\n                                    : \"breadcrumb-item tx-15\"\n                            }\n                            active={index === items.length - 1}\n                            aria-current={index === items.length - 1 ? \"page\" : undefined}\n                        >\n                            {item.toUpperCase()}\n                        </Breadcrumb.Item>\n                    ))}\n                </Breadcrumb>\n            </div>\n        </div>\n    );\n};\n","import { Card, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\ninterface CardConfirmation {\n  baseURL?: string;\n  message?: string;\n  title?: string;\n  subtitle?: string;\n  addButton?: boolean;\n}\n\nexport const ConfirmationCardButton: React.FC<CardConfirmation> = ({\n  title,\n  subtitle,\n  message,\n  baseURL,\n  addButton = false,\n}) => {\n  return (\n    <div>\n      <div className=\"d-flex justify-content-center mt-5\">\n        <Col sm={12} md={12} lg={4} xl={4}>\n          <Card className=\"bg-primary text-center text-light\">\n            <Card.Body>\n              <h5 className=\"card-title\">{title}</h5>\n              <h6 className=\"card-subtitle mb-2  \">{subtitle}</h6>\n              <p className=\"card-text\">{message}</p>\n              {addButton && (\n                <Link\n                  to={baseURL || \"#\"}\n                  className=\"card-link  font-weight-bold btn btn-outline-light text-light\"\n                >\n                  Card link\n                </Link>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\n\nexport interface Content {\n    children: JSX.Element;\n    message: string | string[] | undefined;\n    inputFocus: boolean;\n}\n\nexport const InputErrorMessage: React.FC<Content> = ({ message, children, inputFocus }) => {\n    // Initialize the validation status as \"unchecked\" (0), \"success\" (1), or \"error\" (2)\n    const [validationStatus, setValidationStatus] = useState(0);\n    // Function to handle form validation based on the message\n    const validateForm = () => {\n        if (message) {\n            // Set as error when there is a message\n            setValidationStatus(2);\n        } else {\n            if (inputFocus) {\n                // Set as success when there is no message\n                setValidationStatus(1);\n            } else {\n                setValidationStatus(0)\n            }\n        }\n    };\n\n    // Call the validation function when the component renders initially or when the message changes\n    useEffect(() => {\n        validateForm();\n    }, [message]);\n\n    return (\n        <div className=\"d-flex flex-column align-items-start mb-0 w-100\">\n            <div className=\"d-flex align-items-center w-100\">\n                {children}\n            </div>\n            {/* Add a line break if there is a message */}\n            {message && (\n                <span className=\"tag-outline-danger opacity-75 mt-1\" style={{ lineHeight: '15px' }}>\n                    {Array.isArray(message) ? (\n                        message.map((item, index) => (\n                            <React.Fragment key={index}>\n                                <i className={`h6 ms-2 mb-0 bi me-2 ${validationStatus === 2 ? 'bi-x-circle-fill text-danger opacity-75' : ''}`} ></i>\n                                {item}\n                                <br />\n                            </React.Fragment>\n                        ))\n                    ) : (\n                        <React.Fragment>\n                            <i className={`h6 ms-2 mb-0 bi me-2 ${validationStatus === 2 ? 'bi-x-circle-fill text-danger opacity-75' : ''}`} ></i>\n                            {message}\n                            <br />\n                        </React.Fragment>\n                    )}\n                </span>\n            )}\n        </div>\n    );\n};","export const Loader = () => {\n  return (\n    <div className='w-100 text-center my-5'>\n          <div className=\"spinner-border text-primary\" role=\"status\">\n          </div>\n    </div>\n  )\n}","import React from \"react\";\n\ninterface PDFViewerProps {\n  pdfUrl: string;\n}\n\nexport const PDFViewer: React.FC<PDFViewerProps> = ({ pdfUrl }) => {\n  return (\n    <>\n      {pdfUrl ? (\n        <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n          <div style={{ width: \"100%\", maxWidth: \"800px\", margin: \"0 auto\" }}>\n            <iframe\n              title=\"PDF Viewer\"\n              src={pdfUrl}\n              style={{ width: \"100%\", minHeight: \"600px\", border: \"1px solid #ccc\" }}\n            ></iframe>\n          </div>\n        </div>\n      ) : (\n        <div style={{ textAlign: \"center\" }}>\n          <h2>No Hay PDF</h2>\n        </div>\n      )}\n    </>\n  );\n};\n","import { Row, Col, Button } from 'react-bootstrap';\nimport { Link } from 'react-router-dom'\nimport { TitleComponent, BreadCrumb } from '../Global';\n\n\nconst ServiciosACotizar = () => {\n  return (\n    <div>\n      {/* Breadcrumb */}\n      <BreadCrumb\n        items={['inicio', 'CONFIRMACIONES', 'VENTAS', 'COTIZACIONES', 'NUEVO']}\n        baseURL={['inicio', 'nexos/ventasconfirmaciones', 'nexos/vistalistadocotizaciones', 'nexos/vistalistadocotizaciones', 'nexos/serviciosacotizar']}\n      />\n      {/* Componente Titulo  */}\n      <TitleComponent title='PASO 3' subtitle='SELECCIONE LOS SERVICIOS A COTIZAR' align='center' />\n      {/* container */}\n      <div id=\"container\" style={{ width: \"100%\", height: \"400px\" }}></div>\n      {/* Button to continue */}\n      <Row>\n        <Col>\n          <div className='d-flex justify-content-end'>\n            <Link to={`${process.env.PUBLIC_URL}/nexos/resumendeservicios`} className=\"text-muted\">\n              <Button variant=\"\" className=\"btn me-5 mt-3 px-5 py-3 btn-primary\">\n                CONTINUAR\n              </Button>\n            </Link>\n          </div>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default ServiciosACotizar","import { useState } from \"react\";\nimport { Modal, Button, Form } from \"react-bootstrap\";\nimport { TitleComponent } from \"../../Global/TitleComponent\";\n\nconst ModalSeguimientoOrganizacion = ({\n  showModal,\n  onClose,\n  onSubmit,\n  selectedRowId,\n}: any) => {\n  const [message, setMessage] = useState(\"\");\n  const [priority, setPriority] = useState(\"\");\n\n  const handleSubmit = () => {\n    onSubmit({ message, selectedRowId, priority });\n  };\n\n  const resetForm = () => {\n    setMessage(\"\");\n    setMessage(\"\");\n    setPriority(\"0\");\n  };\n\n  const handleModalClose = async () => {\n    onClose();\n    resetForm();\n  };\n\n  const isMessageEmpty = message.trim() === \"\";\n\n  const handlePriorityChange = (e: any) => {\n    setPriority(e.target.value);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      show={showModal}\n      onHide={handleModalClose}\n      keyboard={false}\n    >\n      <Modal.Body>\n        <Form.Group>\n          <TitleComponent\n            title=\"Mensaje seguimiento\"\n            description={`Cotización #${selectedRowId}`}\n          />\n          <hr />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Prioridad:</Form.Label>\n          <Form.Select\n            name=\"priority\"\n            aria-label=\"Default select example\"\n            value={priority}\n            onChange={handlePriorityChange}\n          >\n            <option value=\"0\" defaultChecked >No prioritario</option>\n            <option value=\"1\">Prioritario</option>\n          </Form.Select>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n          <Form.Label>Nota:</Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows={5}\n            name=\"message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </Form.Group>\n      </Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"dark\" onClick={handleModalClose}>\n          Cerrar\n        </Button>\n        <Button\n          disabled={isMessageEmpty}\n          variant=\"primary\"\n          onClick={() => {\n            handleSubmit()\n            handleModalClose()\n          }}\n        >\n          Agregar\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n\nexport default ModalSeguimientoOrganizacion;\n"],"names":["TitleComponent","title","align","subtitle","description","className","BasicDataTable","data","columns","addButtonLink","addButtonState","searchFilter","filterDate","value","isLoading","exceptionTitleText","exceptionSubtitleText","btnText","handleChange","date","totalFunc","tableInstance","useTable","useGlobalFilter","useSortBy","usePagination","getTableProps","headerGroups","getTableBodyProps","prepareRow","state","setGlobalFilter","page","nextPage","previousPage","canNextPage","canPreviousPage","pageOptions","setPageSize","globalFilter","pageIndex","pageSize","isDataEmpty","length","LocalizationProvider","style","height","dateAdapter","AdapterDayjs","DesktopDatePicker","label","inputFormat","dayjs","onChange","newValue","renderInput","params","TextField","GlobalFilter","filter","setFilter","hasAddButton","to","Loader","ConfirmationCardButton","baseURL","borderTop","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","borderRight","borderLeft","render","isSorted","isSortedDesc","row","getRowProps","cells","cell","getCellProps","borderBottom","variant","onClick","disabled","e","Number","target","placeholder","BreadCrumb","items","Array","isArray","alt","src","require","Breadcrumb","item","index","href","undefined","process","toLowerCase","active","toUpperCase","message","addButton","sm","md","lg","xl","InputErrorMessage","children","inputFocus","useState","validationStatus","setValidationStatus","useEffect","lineHeight","role","PDFViewer","pdfUrl","display","flexDirection","alignItems","width","maxWidth","margin","minHeight","border","textAlign","id","showModal","onClose","onSubmit","selectedRowId","setMessage","priority","setPriority","handleModalClose","isMessageEmpty","trim","show","onHide","keyboard","controlId","name","defaultChecked","as","rows"],"sourceRoot":""}